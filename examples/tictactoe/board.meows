~( ^.x.^)>
Meowscript implementation of a simple 'Tic Tac Toe' game
with dynamic board size.

This yarn ball creates the board.
<(^.x.^ )~

takes "std.meows"
takes "hashmap.meows"

mew Tile = =^.x.^= [
    empty: " ",
    x:     "x",
    o:     "o"
]

mew Turn = enum ([
    "x",
    "o"
])

mew GameState = enum ([
    "continue",
    "x_won",
    "o_won",
    "draw"
])

=^.x.^= make_board(size)
    mew board = hashmap()
    take (mew i = 0) and do (paw at i) while (i < size)
        take (mew j = 0) and do (paw at j) while (j < size)
            board.add([i, j], Tile.empty)
            meow([i, j])
            meow(board)
        meow meow
    meow meow
    board.add("size", size)
    bring board
meow meow

=^.x.^= is_win(shelf)
    bring shelf                                   \
        and peek shelf != Tile.empty              \
        and all(shelf, ap(equal, peek shelf))
meow meow

=^.x.^= winner(tile)
    bring tile == Tile.x        \
        ? GameState.x_won       \
        : GameState.o_won
meow meow

=^.x.^= change_turn(turn)
    bring turn == Turn.x        \
        ? Turn.o                \
        : Turn.x
meow meow

=^.x.^= turn_tile(turn)
    bring turn == Turn.x        \
        ? Tile.x                \
        : Tile.o
meow meow

=^.x.^= game_state(board)
    mew is_draw = happy
    mew size = board.get("size")

    mew diagonal_left = []
    mew diagonal_right = []

    take (mew i = 0) and do (paw at i) while (i < size)
        mew row = []
        mew column = []
        take (mew j = 0) and do (paw at j) while (j < size)
            board.get([j, i]) push row
            board.get([i, j]) push column

            mew? (is_draw and (peek row == Tile.empty or peek column == Tile.empty))
                is_draw = sad
            meow meow

            mew? (i == j)
                board.get([i, j]) push diagonal_left 
            meow meow

            mew? (i + j == size - 1)
                board.get([i, j]) push diagonal_right
            meow meow
        meow meow

        mew? (is_win(row))
            bring winner(peek row)
        mew? (is_win(column))
            bring winner(peek column)
        meow meow
    meow meow

    mew? (is_win(diagonal_left))
        bring winner(peek diagonal_left)
    mew? (is_win(diagonal_right))
        bring winner(peek diagonal_right)
    meow meow

    bring is_draw ? GameState.draw : GameState.continue
meow meow


=^.x.^= print_board(board)
    mew size = board.get("size")
    take (mew i = 0) and do (paw at i) while (i < size)
        purr("[ ")
        take (mew j = 0) and do (paw at j) while (j < size)
            mew text = board.get([i, j])
            text = j < size - 1 ? text.." | " : text
            purr(text)
        meow meow
        meow(" ]")
    meow meow
meow meow
