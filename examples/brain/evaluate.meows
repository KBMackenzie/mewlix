~( ^.x.^)> ----------------------------------------
Evaluator for the AST.

The evaluator context is a box holding the current
index, user input and a hashmap.

A hashmap is used to emulate the the huge uint8_t
array Brainf*ck implementations tend to use, as
Meowscript has no indexable arrays, only shelves.

Each item in the hashmap is an integer and should
always be in the range [0, UPPER_BOUND).

The context's output shelf should be reversed when
evaluation is done.
---------------------------------------- <(^.x.^ )~

takes "parser.meows"
takes "hashmap.meows"

mew UPPER_BOUND = 256 -- Non-inclusive.

mew TokenAction = to_hashmap ([
    tuple( TokenType.MoveLeft,  ( ^.x.^)> (x, y) => _change_index(x,  y) ),
    tuple( TokenType.MoveRight, ( ^.x.^)> (x, y) => _change_index(x, -y) ),
    tuple( TokenType.Increment, ( ^.x.^)> (x, y) => _change_value(x,  y) ),
    tuple( TokenType.Decrement, ( ^.x.^)> (x, y) => _change_value(x, -y) ),
    tuple( TokenType.Puts,      ( ^.x.^)> (x, y) => _put_output(x, y)    ),
    tuple( TokenType.Gets,      ( ^.x.^)> (x, _) => _pop_input(x)        )
])

=^.x.^= make_context (input)
    bring =^.x.^= [
        index: 0,
        map: hashmap(),
        update:    ( ^.x.^)> (x) => home.map.add(home.index, x),
        get_value: ( ^.x.^)> ( ) => home.map.get(home.index),
        has_index: ( ^.x.^)> ( ) => home.map.contains(home.index),
        output: [],
        input: input
    ]
meow meow


~( ^.x.^)> -------------
       Evaluator 
------------- <(^.x.^ )~

=^.x.^= evaluate (context, tokens)
    meowmeow (tokens)
        mew token = peek tokens
        mew? (token.type == TokenType.Loop)
            meowmeow (either(context.get_value(), 0) != 0) -- Loop while not 0.
                evaluate(context, token.block)
            meow meow
        hiss!
            mew action = TokenAction.get(token.type)
            action(context, token.count)
        meow meow
        knock over tokens
    meow meow
    --meow("Evaluation context: "..context)
meow meow

=^.x.^= run_evaluator (input, tokens)
    mew context = make_context(input)
    evaluate(context, tokens)
    bring reverse(context.output)
meow meow


~( ^.x.^)> -------------
        Helpers
------------- <(^.x.^ )~

=^.x.^= _change_index (context, modifier)
    context.index = context.index + modifier
meow meow

=^.x.^= _change_value (context, modifier)
    mew x = context.has_index() ? context.get_value() : 0
    x = (x + modifier) % UPPER_BOUND
    context.update(x)
meow meow

=^.x.^= _put_output (context, modifier)
    mew x = context.has_index() ? context.get_value() : 0
    mew char = bap(x)
    take (mew i = 0) and do (paw at i) while (i < modifier)
        char push context.output
    meow meow
meow meow

=^.x.^= _pop_input (context)
    mew x = bop(peek context.input)
    knock over context.input
    context.update(x)
meow meow
