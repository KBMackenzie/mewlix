-- mewlix: all expressions, operators and statements
yarn ball language

takes std as something
from std takes map, filter, fold

2 + 2 * 2 / 2
2 + 2.25
1.000006 + 2e12
(2 + 2) / 2
2 * (2 + 2)
true
false
mew x = 1
x + x
x .. x
x + x / x ^ x
not x
x or x
x and x
x nor x
x nand x
"x" if x else "not x"
look closely at x

f :> g
f :> g :> h

x |> f
x |> f |> g |> h

~( ^.x.^)>
This is a long comment!
<(^.x.^ )~

-- Empty declarations:
mew empty
mew also_empty = nothing

-- Strings:
mew multiline = """
This is a multiline string!
"""
mew lucky_number = :3"Your number is [std.random_int(0, 10)]!"
:3"[std.random()]"
:3"Yarn strings with no expressions are valid, too!"

-- Shelves:
mew shelf = [1, 2, 3]
meow shelf...?

"charlie" push shelf
paw at shelf
knock over shelf
meow "charlie" in shelf

mew cat = =^-x-^= [
  name: "charlie",
  coat: "tabby",
  hobbies: ["eating", "sleeping"]
]

-- Functions:
mew sum = =^oxo^= (a, b) => a + b

mew curry = =^oxo^= (a) => =^oxo^= (b) => =^oxo^= (c) => [a, b, c]

=^.x.^= sumf(a, b)
  bring a + b
~meow

mew sumf_ = =^oxo^= () =>
  a + b

-- Clowders:
clowder Cat
  =^.x.^= wake(name)
    home.name = name
  ~meow

  =^.x.^= introduction()
    bring "meow, i'm " .. home.name
  ~meow
~meow

clowder Charlie is Cat
  =^.x.^= wake()
    look outside("charlie")
  ~meow
~meow

mew charlie = new Charlie()
meow (charlie is Cat)

meow charlie.introduction()
meow charlie["introduction"]()

-- IO:
mew name = listen "What's your name?"
meow "Your name is: "..name

-- Control Flow:
mew r = std.random()
look if r == 0
  meow "extremely unlikely."
or if r == 1
  meow "impossible by design."
else just
  meow "hello! this is the most common case by a very, very, very big margin!"
~meow

-- Loops:
stare while true 
  meow ":3"
  escape
~meow

mew kitties = [1, 2, 3]
chase after kitty in kitties!!!!!!!!
  meow kitty
  catnap
~meow

-- Assertions:
assert 2 == 2

-- Exceptions:
throw (meow "hello c:")

-- Try/Catch:
watch attentively
  throw "!!"
pounce on error
  meow error
~meow
