~( ^.x.^)>
A simple hashset implementation for all types
in Meowscript that can be hashed.

Values can be any type except functions.

It has O(1) addition and lookup time complexity,
and uses Meowscript's boxes underneath the
hood. As Meowscript's boxes can only have string
keys, the hash key has to be stringified.

This is fine, however, since the stringifying is
done with a built-in function and is reasonably
fast.

A hashset can have heterogenous values; comparisons
are neatly wrapped in a watch/catch to handle
type errors in comparisons. The watch/catch does
not muffle any other unrelated exceptions.
<(^.x.^ )~

takes "exception.meows"

=^.x.^= hashset()

    ~( ^.x.^)>
    Local context: Define helper functions that do not
    pollute the outer environment.
    <(^.x.^ )~

    TABLE_SIZE = 769

    =^.x.^= get_hash(key)
        bring string(hash(key) % TABLE_SIZE)
    meow meow

    =^.x.^= add_value(value)
        mew hash_key = get_hash(value)
        mew list = lookup(home.items, hash_key)
        home.items[hash_key] = list_add(list, value)
    meow meow

    =^.x.^= safe_comp(a, b)
        watch
            bring a == b
        catch (MeowException.InvalidOperation)
            bring sad
        meow meow
    meow meow

    =^.x.^= list_add(list, value)
        mew? (not list)
            list = []
        meow meow

        mew top = []
        meowmeow (list)
            mew item = peek list
            mew? (safe_comp(value, item))
                bring top..list
            meow meow
            item push top
            knock over list
        meow meow
        bring value push top
    meow meow

    =^.x.^= contains_value(value)
        mew hash_key = get_hash(value)
        mew list = lookup(home.items, hash_key)
        meowmeow (list)
            mew item = peek list
            mew? (safe_comp(item, value))
                bring happy
            meow meow
            knock over list
        meow meow
        bring lonely
    meow meow

    =^.x.^= remove_value(value)
        mew hash_key = get_hash(value)
        mew list = lookup(home.items, hash_key)
        home.items[hash_key] = list_remove(list, value)
    meow meow

    =^.x.^= list_remove(list, value)
        mew? (not list)
            bring []
        meow meow

        mew top = []
        meowmeow (list)
            mew item = peek list
            knock over list
            mew? (safe_comp(value, item))
                bring top..list
            meow meow
            item push top
        meow meow
        bring top
    meow meow

    bring =^.x.^= [
        items: =^.x.^= [],
        add: add_value,
        contains: contains_value,
        remove: remove_value,
        clear: ( ^.x.^)> () => (home.items = =^.x.^= [])
    ]
meow meow



------------------------------------------------------------------------------
------------------------------------------------------------------------------


~( ^.x.^)> ---------------
      Hashset Helpers
--------------- <(^.x.^ )~

~( ^.x.^)>
Make a hashset and fill it with items from
a shelf (which is taken as argument).
<(^.x.^ )~

=^.x.^= to_hashset (xs)
    mew output = hashset()
    meowmeow (xs)
        output.add(peek xs)
        knock over xs
    meow meow
    bring output
meow meow


~( ^.x.^)>
Get all items in the set as a shelf.
The output is unordered.
<(^.x.^ )~

=^.x.^= from_hashset (hset)
    mew items = values(hset.items)
    mew output = []
    meowmeow (items)
        mew xs = peek items
        meowmeow (xs)
            (peek xs) push output
            knock over xs
        meow meow
        knock over items
    meow meow
    bring output
meow meow
