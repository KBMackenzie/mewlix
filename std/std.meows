~( ^.x.^)> --------------------------------
The 'std.meows' yarn ball.
The heart of the standard library.

It contains:
- Functions for shelves, strings and boxes,
like 'map' and 'fold'.
- Functions for basic operations.
- Box constructors for important box types,
such as tuples.

A colorful yarn ball!
-------------------------------- <(^.x.^ )~

takes "exception.meows"

~( ^.x.^)> --------------
  Arithmetic operations
-------------- <(^.x.^ )~

mew add = ( ^.x.^)> (a, b) => (a + b)
mew sub = ( ^.x.^)> (a, b) => (a - b)
mew mul = ( ^.x.^)> (a, b) => (a * b)
mew div = ( ^.x.^)> (a, b) => (a / b)
mew mod = ( ^.x.^)> (a, b) => (a % b)

mew pow = ( ^.x.^)> (a, b) => (a ^ b)
mew sqr = ( ^.x.^)> (a) => (a ^ 2)

mew min = ( ^.x.^)> (a, b) => (a < b ? a : b)
mew max = ( ^.x.^)> (a, b) => (a > b ? a : b)

mew idiv = ( ^.x.^)> (a, b) => (floor(a / b))

mew paw_  = ( ^.x.^)> (a) => (paw at a)
mew claw_ = ( ^.x.^)> (a) => (claw at a)


~( ^.x.^)> --------------
    Logic operations
-------------- <(^.x.^ )~

mew not_ = ( ^.x.^)> (a)    => (not a)
mew or_  = ( ^.x.^)> (a, b) => (a or b)
mew and_ = ( ^.x.^)> (a, b) => (a and b)


~( ^.x.^)> ---------------
     Other Operations
--------------- <(^.x.^ )~

mew join   = ( ^.x.^)> (a, b) => (a..b)
mew length = ( ^.x.^)> (a) => (a?!)

mew equal          = ( ^.x.^)> (a, b) => (a == b)
mew lesser         = ( ^.x.^)> (a, b) => (a < b)
mew greater        = ( ^.x.^)> (a, b) => (a > b)
mew lesser_equal   = ( ^.x.^)> (a, b) => (a <= b)
mew greater_equal  = ( ^.x.^)> (a, b) => (a >= b)
mew not_equal      = ( ^.x.^)> (a, b) => (a != b)


~( ^.x.^)>
Safely run a comparison between two values.

This function expects a comparison function and two
arguments to apply to that function.

If an InvalidOperation exception is thrown by the
comparison function, this function returns sad.

Else, it returns the boolean result of the comparison.
<(^.x.^ )~

=^.x.^= safe_compare (fn, a, b)
    watch
        bring fn(a, b)
    catch (MeowException.Type)
        bring sad
    meow meow
meow meow


~( ^.x.^)>
Inspired by Haskell's 'id' and 'const' functions.
(The const function would be flipped.)

The 'mirror' function doubles as a shallow-copying
function, too!
<(^.x.^ )~

mew mirror = ( ^.x.^)> (a) => (a)
mew bounce = ( ^.x.^)> (a, b) => (b)


~( ^.x.^)>
Inspired by Haksell's Alternative typeclass and the <|>
function.
(In special the Maybe instance of that typeclass.)

If the first argument is nothing, this function returns
the second argument.
<(^.x.^ )~

mew either = ( ^.x.^)> (a, b) => (a == nothing ? b : a)



~( ^.x.^)> -----------
    Random numbers
----------- <(^.x.^ )~

~( ^.x.^)>
Random function helpers.
Based heavily on these solutions:
https://stackoverflow.com/a/1527820
<(^.x.^ )~

-- Random float in range [min, max)
=^.x.^= random_range(min, max)
    bring random() * (max - min) + min
meow meow

-- Random float in range [0, num)
=^.x.^= random_until(num)
    bring random() * num
meow meow

-- Random int in range [min, max]
=^.x.^= random_int(min, max)
    bring floor(random() * (max - min + 1)) + min
meow meow



~( ^.x.^)> --------------
    Box constructors
-------------- <(^.x.^ )~

=^.x.^= tuple(a, b)
    bring =^.x.^= [
        first:  a,
        second: b
    ]
meow meow

=^.x.^= triple(a, b, c)
    bring =^.x.^= [
        first:  a,
        second: b,
        third:  c
    ]
meow meow



~( ^.x.^)> --------------
      Enumerations
-------------- <(^.x.^ )~

~( ^.x.^)> 
Makes an enum-like box with keys
from a list passed as argument.

The output box contains each item in
the list as a key and a distinct
integer number as each key's value.

Enumeration starts at 0.

The enum keys can be used as regular
keys past creation:

----
mew MyEnum = enum(["A", "B"])
mew a = MyEnum.A    -- a is 0
mew b = MyEnum.B    -- b is 1
----
<(^.x.^ )~

=^.x.^= enum (xs)
    mew output = =^.x.^= []
    mew i = 0
    meowmeow (xs)
        output[string(peek xs)] = i
        paw at i
        knock over xs
    meow meow
    bring output
meow meow



~( ^.x.^)> --------------
  Stack/shelf functions
-------------- <(^.x.^ )~

~( ^.x.^)>
Map implementation.
Callback function should take one argument.
<(^.x.^ )~

=^.x.^= map (shelf, fn)
    mew output = []
    meowmeow (shelf)
        fn(peek shelf) push output
        knock over shelf
    meow meow
    bring reverse(output) -- Reverse because stack.
meow meow


~( ^.x.^)>
Foldl implementation.
Callback function should take two arguments!
<(^.x.^ )~

=^.x.^= fold (shelf, fn, init)
    mew output = init
    meowmeow (shelf)
        output = fn(output, peek shelf)
        knock over shelf
    meow meow
    bring output
meow meow


~( ^.x.^)>
Filter implementation.
Callback should take one argument.
<(^.x.^ )~

=^.x.^= filter (shelf, fn)
    mew output = []
    meowmeow (shelf)
        mew item = peek shelf
        mew? (fn(item))
            item push output
        meow meow
        knock over shelf
    meow meow
    bring reverse(output) -- Reversing because stack.
meow meow


~( ^.x.^)>
'Contains' function.
Checks if an item exists in the shelf.
<(^.x.^ )~

=^.x.^= contains (shelf, item)
    meowmeow (shelf)
        mew? (peek shelf == item)
            bring happy
        meow meow
        knock over shelf
    meow meow
    bring sad
meow meow


~( ^.x.^)>
Zip implementation.
Zips two lists together into a list of tuples.
<(^.x.^ )~

=^.x.^= zip (a, b)
    mew output = []
    meowmeow (a and b)
        tuple(peek a, peek b) push output
        knock over a
        knock over b
    meow meow
    bring reverse(output)
meow meow


~( ^.x.^)>
'Concat All' function.
Concats a list of lists into a list.
<(^.x.^ )~

=^.x.^= concat_all (shelf)
    bring fold(shelf, join, [])
meow meow


~( ^.x.^)>
'Any' function.
Checks if any item in the shelf satisfies a condition.
<(^.x.^ )~

=^.x.^= any (shelf, fn)
    meowmeow (shelf)
        mew? (fn(peek shelf))
            bring happy
        meow meow
        knock over shelf
    meow meow
    bring sad
meow meow


~( ^.x.^)>
'All' function.
Checks if all items in the shelf satisfy a condition.
<(^.x.^ )~

=^.x.^= all (shelf, fn)
    meowmeow (shelf)
        mew? (not fn(peek shelf))
            bring sad
        meow meow
        knock over shelf
    meow meow
    bring happy
meow meow


~( ^.x.^)> -------------------------
  Additional stack/shelf functions
------------------------- <(^.x.^ )~

~( ^.x.^)>
Indexing function implementation.
It's O(n) and highly discouraged, because shelves!

Note this function does not throw exceptions when an
index goes out of bounds, because of how
knocking over items from shelves works in Meowscript.
It returns 'nothing' instead.
<(^.x.^ )~

=^.x.^= index (shelf, num)
    take (mew i = 0) and do (paw at i) while (i < num)
        knock over shelf
    meow meow 
    bring peek shelf
meow meow


~( ^.x.^)>
'Take' function implementation.
Takes n items from a shelf and returns a list of items.
<(^.x.^ )~

=^.x.^= take_n (shelf, n)
    mew output = []
    take (mew i = 0) and do (paw at i) while (i < n)
        (peek shelf) push output
        knock over shelf
    meow meow
    bring reverse(output) -- Reversing because stack.
meow meow


~( ^.x.^)>
'Drop' function implementation.
Drops n items from a shself and returns the shelf.
<(^.x.^ )~

=^.x.^= drop_n (shelf, n)
    mew output = []
    take (mew i = 0) and do (paw at i) while (i < n)
        knock over shelf
    meow meow
    bring shelf
meow meow


~( ^.x.^)>
'Take while' function implementation.
Takes items while the top of the shelf satisfies the predicate.
<(^.x.^ )~

=^.x.^= take_while (shelf, fn)
    mew output = []
    meowmeow (fn(peek shelf))
        (peek shelf) push output
        knock over shelf
    meow meow
    bring reverse(output) -- Reversing because stack.
meow meow


~( ^.x.^)>
'Drop while' function implementation.
Drops items while the top of the shelf satisfies the predicate.
<(^.x.^ )~

=^.x.^= drop_while (shelf, fn)
    meowmeow (fn(peek shelf))
        knock over shelf
    meow meow
    bring shelf
meow meow




~( ^.x.^)> -----------
   String functions
----------- <(^.x.^ )~

=^.x.^= is_empty(x)
    bring nuzzle(x)
meow meow

=^.x.^= split_at(str, n)
    mew a = substring(str, 0, n)
    mew b = substring(str, n, str?! - n)
    bring [a, b]
meow meow

=^.x.^= starts_with(str, prefix)
    bring substring(str, 0, prefix?!) == prefix
meow meow

=^.x.^= ends_with(str, suffix)
    mew len = suffix?!
    bring substring(str, str?! - len, len) == suffix
meow meow

=^.x.^= concat_as_string(shelf)
    bring fold(shelf, join, "")
meow meow


~( ^.x.^)> ---------------------
  Partial function application
--------------------- <(^.x.^ )~

~( ^.x.^)>
Flip a function's arguments.
Accepts only (a -> b -> c) functions.
<(^.x.^ )~

=^.x.^= flip (fn)
    bring ( ^.x.^)> (a, b) => (fn(b, a))
meow meow


~( ^.x.^)>
Function composition, similar to the (.) function in Haskell.
Thus the name!
Takes a (b -> c) and an (a -> b) function as arguments in order.
Returns a function composed of those two functions: (a -> c).
<(^.x.^ )~

=^.x.^= dot(fa, fb)
    bring ( ^.x.^)> (x) => (fb(fa(x)))
meow meow


~( ^.x.^)>
Partial function application. Returns a function.
Takes an (a -> b -> c) function and makes it a (b -> c).
<(^.x.^ )~

=^.x.^= ap (fn, a)
    bring ( ^.x.^)> (b) => (fn(a, b))
meow meow

~( ^.x.^)>
Partial function application. Returns a function.
Takes an (a -> b -> c -> d) function and makes it (b -> c -> d).
<(^.x.^ )~

=^.x.^= ap2 (fn, a)
    bring ( ^.x.^)> (b, c) => (fn(a, b, c))
meow meow

~( ^.x.^)>
Partial function application. Returns a function.
Takes an (a -> b -> c -> d -> e) function and amkes it (b -> c -> d -> e).
<(^.x.^ )~

=^.x.^= ap3 (fn, a)
    bring ( ^.x.^)> (b, c, d) => (fn(a, b, c, d))
meow meow
