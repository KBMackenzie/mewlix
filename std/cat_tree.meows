~( ^.x.^)> -----------------------------------------------
An implementation of iterators and lazy list computations.

It's inspired by C#'s IEnumerable and LINQ!

-- Cat Trees (Iterator) --
They provide an interface for interating over a collection
or otherwise iteratable object.

They contain three core items:
1. 'current'    -> The 'current' item.
2. 'next()'     -> A method that moves to the next item.
3. 'rewind()'   -> Rewinds the iterator to its initial state.

The cat_tree() function takes three arguments:
1. An initial state value.
2. A 'state' value. It can be anything.
3. An iterator function. It should return a value that'll
be used as the new 'current' value each time .next() is
called.

All of those arguments are deep-copied.

The iterator function can manipulate the home.state field
if it wishes.

The cat_tree() function produces a rewind() function behind
the scenes that sets home.current and home.state to the
1st and 2nd arguments passed to the function.


-- Scratchpost (Wrapper) --
Scratchpost provide an interface for lazily performing queued
operations over an iterator's values. 

It wraps an iterator and provides a way to queue higher-order
functions for:

1. Mapping over elements (e.g. 'choose').
2. Filtering out elements (e.g. 'where').

Every call of '.where()', '.choose()' add a new function to
the bottom of the queue.

Scratchposts have two core methods:

1. '.scratch()'     -> Performs queued operations on the
value of the iterator's 'current'.
2. '.step()'        -> Calls the iterator's .next().

The .scratch() method will apply every queued function to the
cached 'current' value.

If all functions return happy, .scratch() returns the result;
otherwise, it calls .step() and repeats the process on the
next item.

The .to_shelf() method will always traverse the iterator's 
values only once, no matter how many functions are in the
queue.
**Note:** The .to_shelf() function **will hang** when given
an infinite iterator.

The .pick(x) method will only ask for x items, no matter how
many items the iterator is able to produce. The functions in
the queue will, thus, only be applied to exactly x items.

The .rewind() method rewinds the iterator. It does **not**
clean the function queue.

The .reset() method rewinds the iterator *and* cleans the
scratchpost's function queue.

The scratchpost() function takes one argument: An iterator box,
which it **always deep-copies.**

----------------------------------------------- <(^.x.^ )~

=^.x.^= cat_tree (init, state, iterator)

    =^.x.^= rewind ()
        home.state = copy(state)
        home.current = copy(init)
    meow meow

    =^.x.^= next ()
        home.current = home.iterator()
        bring home.current
    meow meow

    =^.x.^= to_shelf ()
        mew output = []
        meowmeow (home.current)
            home.current push output
            home.next()
        meow meow
        bring reverse(output)
    meow meow

    =^.x.^= pick (n)
        mew output = []
        mew i = 0
        meowmeow (home.current and i < n)
            home.current push output
            home.next()
            paw at i
        meow meow
        bring reverse(output)
    meow meow

    =^.x.^= skip (n)
        mew i = 0
        meowmeow (home.current and i < n)
            home.next()
            paw at i
        meow meow
        bring home -- Allow chaining.
    meow meow

    bring =^.x.^= [
        current:    copy(init),
        state:      copy(state),
        iterator:   copy(iterator),
        next:       next,
        rewind:     rewind,
        to_shelf:   to_shelf,
        pick:       pick,
        skip:       skip
    ]
meow meow


=^.x.^= scratchpost (i)

    mew queue = []
    mew itr = copy(i)
    mew current = itr.current

    =^.x.^= where (fn)
        bring current and fn(current)
    meow meow

    =^.x.^= choose (fn)
        mew? (not current)
            bring sad
        meow meow
        current = fn(current)
        bring happy
    meow meow

    ~( ^.x.^)> ------------
           ENQUEUING 
    ------------ <(^.x.^ )~

    ~( ^.x.^)>
    O(n) appending, sadly necessary.
    It only becomes inefficient if MANY functions are queued. (Unlikely.)
    Return the box itself to allow for chained methods.
    <(^.x.^ )~

    =^.x.^= enqueue (queued_func, fn)
        mew f = ( ^.x.^)> () => (queued_func(fn))
        queue = queue..[f] 
    meow meow

    ~( ^.x.^)>
    Higher-order function wrapper around the
    'enqueue' function.
    <(^.x.^ )~

    =^.x.^= where_enq (fn)
        enqueue(where, fn)
        bring home
    meow meow

    =^.x.^= choose_enq (fn)
        enqueue(choose, fn)
        bring home
    meow meow


    ~( ^.x.^)> ------------
            STEPPING
    ------------ <(^.x.^ )~

    ~( ^.x.^)>
    Steps forward.
    Returns nothing.
    <(^.x.^ )~

    =^.x.^= do_step ()
        itr.next()
        current = itr.current
    meow meow

    ~( ^.x.^)>
    Reset current to
    an unaltered value.
    <(^.x.^ )~

    =^.x.^= backstep ()
        current = itr.current
    meow meow

    ~( ^.x.^)>
    Does not step forward.
    Just gets current.
    <(^.x.^ )~

    =^.x.^= scratch ()
        mew? (not current)
            bring nothing
        meow meow

        mew queue_ = queue -- Shallow copy.
        mew state = happy
        meowmeow(queue_)
            state = state and (peek queue_)()
            knock over queue_
        meow meow

        mew? (not state)
            do_step()
            bring scratch()
        meow meow

        bring current
    meow meow


    ~( ^.x.^)> ------------
            BUILDING
    ------------ <(^.x.^ )~

    ~( ^.x.^)>
    Builds a shelf applying every queued
    function to each item yielded by the
    iterator.
    <(^.x.^ )~

    =^.x.^= to_shelf ()
        mew output = []
        mew c = home.scratch()
        meowmeow (c)
            c push output
            home.step()
            c = home.scratch()
        meow meow
        bring reverse(output)
    meow meow

    ~( ^.x.^)>
    Builds a shelf applying every queued
    function to n items yielded by the
    iterator.

    It guarantees only n items are visited.
    <(^.x.^ )~

    =^.x.^= pick (n)
        mew output = []
        mew i = 0
        meowmeow (i < n)
            mew c = home.scratch()
            mew? (c)
                c push output
                home.step()
                paw at i
            hiss!
                run off
            meow meow
        meow meow
        bring reverse(output)
    meow meow

    ~( ^.x.^)>
    Skips n items, moving the iterator
    state forward.

    It returns home to allow for using
    it in chained method calls.

    It's *not* a queued operation, however.
    <(^.x.^ )~

    =^.x.^= skip (n)
        mew i = 0
        meowmeow (i < n)
            mew c = home.scratch()
            mew? (c)
                home.step()
                paw at i
            hiss!
                run off
            meow meow
        meow meow
        bring home
    meow meow

    ~( ^.x.^)>
    Gets the first item from the scratchpost.
    it backsteps.
    <(^.x.^ )~

    =^.x.^= first()
        mew one = home.pick(1)
        backstep()
        bring one ? peek one : nothing
    meow meow

    ~( ^.x.^)>
    Rewind iterator and reset
    the current state.
    <(^.x.^ )~

    =^.x.^= rewind()
        itr.rewind()
        backstep()
    meow meow

    ~( ^.x.^)>
    Rewind iterator *and* clean
    function queue.
    <(^.x.^ )~

    =^.x.^= reset()
        home.rewind()
        queue = []
    meow meow

    bring =^.x.^= [
        scratch: scratch,
        step: do_step,
        pick: pick,
        skip: skip,
        first: first,
        to_shelf: to_shelf,
        where: where_enq,
        choose: choose_enq,
        rewind: rewind,
        reset: reset
    ]
meow meow


~( ^.x.^)> ------------------
  A few default iterators:
------------------ <(^.x.^ )~


~( ^.x.^)> ------------------
          Highshelf
------------------ <(^.x.^ )~

~( ^.x.^)>

Convert shelf to a scratchpost, allowing for
lazy computations on list values. THe shelf
itself generates an iterator behind the scenes.

It's meant to be used for query-like operations
on shelves. A few examples of its usage:

number_list                                     \
    .where(( ^.x.^)> (x) => (x > 10))           \
    .first()

string_list                                     \
    .where(( ^.x.^)> (x) => (not is_empty(x)))  \
    .pick(10)

<(^.x.^ )~


=^.x.^= highshelf (shelf)

    =^.x.^= next ()
        knock over home.state
        bring peek home.state
    meow meow

    mew iter = cat_tree(peek shelf, shelf, next)
    bring scratchpost(iter)
meow meow
