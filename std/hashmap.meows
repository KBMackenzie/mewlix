~( ^.x.^)>
A simple hashmap implementation for all types
in Meowscript that can be hashed.

Keys can be any type except functions!

It has O(1) addition and lookup time complexity,
and uses Meowscript's boxes underneath the
hood. As Meowscript's boxes can only have string
keys, the hash key has to be stringified.

This is fine, however, since the stringifying is
done with a built-in function and is reasonably
fast.

A hashmap can have heterogenous keys; comparisons
are neatly wrapped in a watch/catch to handle
type errors in comparisons. The watch/catch does
not muffle any other unrelated exceptions.
<(^.x.^ )~

takes "exception.meows"
takes "std.meows" as std

=^.x.^= hashmap()

    ~( ^.x.^)>
    Local context: Define helper functions that do not
    pollute the outer environment.
    <(^.x.^ )~

    TABLE_SIZE = 769

    =^.x.^= get_hash(key)
        bring string(hash(key) % TABLE_SIZE)
    meow meow

    =^.x.^= add_pair(key, value)
        mew hash_key = get_hash(key)
        mew list = lookup(home.pairs, hash_key)
        home.pairs[hash_key] = list_add(list, key, value)
    meow meow

    =^.x.^= safe_comp(a, b)
        watch
            bring a == b
        catch (MeowException.InvalidOperation)
            bring sad
        meow meow
    meow meow

    =^.x.^= list_add(list, key, value)
        mew? (not list)
            list = []
        meow meow

        mew top = []
        meowmeow (list)
            mew pair = peek list
            knock over list
            mew? (safe_comp(pair.key, key))
                pair.value = value
                pair push top
                bring top..list
            meow meow
            pair push top
        meow meow

        mew new_pair = =^.x.^= [ 
            key: key,
            value: value
        ]
        bring new_pair push top
    meow meow

    =^.x.^= get_pair(key)
        mew hash_key = get_hash(key)
        mew list = lookup(home.pairs, hash_key)
        meowmeow (list)
            mew pair = peek list
            mew? (safe_comp(pair.key, key))
                bring pair.value
            meow meow
            knock over list
        meow meow
        bring lonely
    meow meow

    =^.x.^= contains_pair(key)
        mew hash_key = get_hash(key)
        mew list = lookup(home.pairs, hash_key)
        meowmeow (list)
            mew pair = peek list
            mew? (safe_comp(pair.key, key))
                bring happy
            meow meow
            knock over list
        meow meow
        bring sad
    meow meow

    =^.x.^= remove_pair(key)
        mew hash_key = get_hash(key)
        mew list = lookup(home.pairs, hash_key)
        home.pairs[hash_key] = list_remove(list, key)
    meow meow

    =^.x.^= list_remove(list, key)
        mew? (not list)
            bring []
        meow meow

        mew top = []
        meowmeow (list)
            mew pair = peek list
            knock over list
            mew? (safe_comp(pair.key, key))
                bring top..list
            meow meow
            pair push top
        meow meow

        bring top
    meow meow

    bring =^.x.^= [
        pairs: =^.x.^= [],
        add: add_pair,
        get: get_pair,
        contains: contains_pair,
        remove: remove_pair,
        clear: ( ^.x.^)> () => (home.pairs = =^.x.^= [])
    ]
meow meow


------------------------------------------------------------------------------
------------------------------------------------------------------------------


~( ^.x.^)> ---------------
      Hashmap Helpers
--------------- <(^.x.^ )~

~( ^.x.^)>
Makes a hashmap and fills it with pairs from a
shelf of tuples.

This function expects a shelf of tuples created
by the tuple() fuction from the std.meows yarn
ball.

The first item in each tuple will be a key, and
the second item will be the value for the pair.
<(^.x.^ )~

=^.x.^= to_hashmap (xs)
    mew output = hashmap()
    meowmeow (xs)
        mew pair = peek xs
        knock over xs
        output.add(pair.first, pair.second)
    meow meow
    bring output
meow meow


~( ^.x.^)>
Get all pairs in a hashmap as a shelf of tuples.

A tuple in Meowscript is just a box created by the
tuple() function from the std.meows yarn ball.

The output is unordered.
<(^.x.^ )~

=^.x.^= from_hashmap (hmap)
    mew pairs = values(hmap.pairs)
    mew output = []
    meowmeow (pairs) 
        mew xs = peek pairs
        meowmeow (xs)
            mew x = peek xs
            knock over xs
            mew pair = std.tuple(x.key, x.value)
            pair push output
        meow meow
        knock over pairs
    meow meow
    bring output
meow meow
